<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	 default-lazy-init="false">

	<!-- 读入配置属性文件 -->
	<!-- 读数据库连接配置文件db.properties，如果需要配置多个则应使用locations属性，多个值用逗分隔 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
    	<property name="locations">
    		<list>
    			<value>classpath:jdbc.properties</value>
    			<value>classpath:kafka.properties</value>
    		</list>
    	</property>
    </bean>

	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com" />

    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
       <property name="driverClassName" value="${jdbc.driver}"></property> 
        <property name="url" value="${jdbc.url}"></property> 
        <property name="username" value="${jdbc.username}"></property> 
        <property name="password" value="${jdbc.password}"></property> 
    </bean> -->
    <!-- 阿里 druid 数据库连接池 -->  
  <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${druid.url}" />    
       <property name = "username" value = "${druid.username}" />    
       <property name = "password" value = "${druid.password}" />    
       <property name = "driverClassName" value = "${druid.driverClassName}" />    
       <property name = "filters" value = "${druid.filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${druid.maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${druid.initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${druid.maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${druid.minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${druid.timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${druid.minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${druid.validationQuery}" />    
       <property name = "testWhileIdle" value = "${druid.testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${druid.testOnBorrow}" />    
       <property name = "testOnReturn" value = "${druid.testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${druid.maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${druid.removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${druid.removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${druid.logAbandoned}" />  
  </bean>  


 <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory" />
        <property name="basePackage" value="cn.hicard.dao" />
    </bean>  -->
    
    <!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
		<property name="mapperLocations">
            <list>
            	<value>classpath:mybatis/mapper/*.xml</value>
            </list>
		</property>
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描）,spring自扫描所有dao包并把其下的所有mybatis接口文件装配入容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dao"></property>
	</bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>    
 	  
 
	 <import resource="classpath:spring/dubbo-provider.xml" />  
	 
	 <!-- 设置启动应用时，Spring会自动去执行ConsumerReceive类里的consume方法，即应用启动就会自动去消费消息 -->
	<!-- <bean id="consumerReceive" class="cn.hicard.kafka.ConsumerReceive" init-method="start"></bean>-->
	 
	 <!-- 异步线程池 -->  
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
		<!-- 核心线程数  -->  
		<property name="corePoolSize" value="10" />  
		<!-- 最大线程数 -->  
		<property name="maxPoolSize" value="300" />  
		<!-- 队列最大长度 >=mainExecutor.maxSize -->  
		<property name="queueCapacity" value="2000" />  
		<!-- 线程池维护线程所允许的空闲时间 -->  
		<property name="keepAliveSeconds" value="300" />  
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 -->  
		<property name="rejectedExecutionHandler">  
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />  
		</property>  
	</bean>  
	 
</beans>